import app from "../../server/_globalRoutes";
import { <%= table %>, Prisma as PTypes } from "@prisma/client"


describe("<%= table %> routes tester", () => {

    let <%= table.toLowerCase() %>: <%= table %>
    let data: PTypes.<%= table %>CreateInput = {<% Object.keys(schema["properties"]).filter((prop) => !/_$/.test(prop)).forEach((value, index)=>{ %>
        <%= value  %> : "",<% }) %>
    }
    const request = require("supertest")(app);

    // Post operation

    it("/POST Create new <%= table %>", async() => {

        <%= table.toLowerCase() %> = (await request
            .post(`/<%= table %>`)
            .send(data)
            .expect("Content-Type", /json/)
            .expect(201)
        )._body.data

    });

    it("/POST Create new <%= table %> with unexpected data", async() => {
        await request
            .post(`/<%= table %>`)
            .send({})
            .expect("Content-Type", /json/)
            .expect(<% if(dto){%>400<%}else{%>500<%}%>)
    });

    // Get operations

    it("/GET get all <%= table %>", async() => {
        await request
            .get(`/<%= table %>`)
            .expect("Content-Type", /json/)
            .expect(200)

    });

    describe("GET /<%= table.toLowerCase() %>/id", () => {

        it("Show specify <%= table %>", async() => {
            await request
                .get(`/<%= table %>/${<%= table.toLowerCase() %>.id_}`)
                .expect("Content-Type", /json/)
                .expect(200)
        });

        it("Try with not exist id_", async() => {
            await request
                .get(`/<%= table %>/0`)
                .expect("Content-Type", /json/)
                .expect(404)
        });

        it("Try with unexpected id_", async() => {
            await request
                .get(`/<%= table %>/zero`)
                .expect("Content-Type", /json/)
                .expect(500)
        });
    });


    // Put operations

    describe("PUT /<%= table.toLowerCase() %>/id", () => {

        it("Modify specify <%= table %>", async() => {
            await request
                .put(`/<%= table %>/${<%= table.toLowerCase() %>.id_}`)
                .send({})
                .expect("Content-Type", /json/)
                .expect(201)
        });

        it("Try with not exist id_", async() => {
            await request
                .put(`/<%= table %>/0`)
                .send({})
                .expect("Content-Type", /json/)
                .expect(404)
        });

        it("Try with unexpected id_", async() => {
            await request
                .put(`/<%= table %>/zero`)
                .send({})
                .expect("Content-Type", /json/)
                .expect(500)
        });
    });


    // Delete operation

    describe("DELETE /<%= table.toLowerCase() %>/id", () => {

        it("Delete specify <%= table %>", async() => {
            await request
                .del(`/<%= table %>/${<%= table.toLowerCase() %>.id_}`)
                .expect("Content-Type", /json/)
                .expect(201)
        });

        it("Try with not exist id_", async() => {
            await request
                .del(`/<%= table %>/0`)
                .expect("Content-Type", /json/)
                .expect(404)
        });

        it("Try with unexpected id_", async() => {
            await request
                .del(`/<%= table %>/zero`)
                .expect("Content-Type", /json/)
                .expect(500)
        });
    });

});